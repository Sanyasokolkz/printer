import aiohttp
import asyncio
from typing import Optional

class PoolFinder:
    def __init__(self):
        self.session = None
        
    async def init_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å–µ—Å—Å–∏—é"""
        if self.session is None:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json'
            }
                
            self.session = aiohttp.ClientSession(
                headers=headers,
                timeout=aiohttp.ClientTimeout(total=10)
            )
            print("üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å DexScreener —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    async def find_pool(self, token_mint: str) -> Optional[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π –ø—É–ª —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ DexScreener"""
        if self.session is None:
            await self.init_session()
            
        url = f"https://api.dexscreener.com/latest/dex/tokens/{token_mint}"
        
        try:
            async with self.session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    pairs = data.get("pairs", [])
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Solana –ø–∞—Ä—ã
                    solana_pairs = [pair for pair in pairs if pair.get("chainId") == "solana"]
                    
                    if solana_pairs:
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
                        solana_pairs.sort(key=lambda x: float(x.get("liquidity", {}).get("usd", 0)), reverse=True)
                        return solana_pairs[0].get("pairAddress")
                return None
                    
        except Exception as e:
            print(f"‚ùå DexScreener –æ—à–∏–±–∫–∞: {e}")
            return None

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é"""
        if self.session:
            await self.session.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å DexScreener –∑–∞–∫—Ä—ã—Ç–æ")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
pool_finder = PoolFinder()

async def find_pool_fast(token_address: str) -> Optional[str]:
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É–ª–∞"""
    return await pool_finder.find_pool(token_address)

async def main():
    """–¢–µ—Å—Ç"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    await pool_finder.init_session()
    
    token_address = "AWgcTbxbMoWWt6tCsHoP6pVbspDn4b6CZBM6qdQ2bonk"
    
    pool = await find_pool_fast(token_address)
    if pool:
        print(f"‚úÖ –ü—É–ª –Ω–∞–π–¥–µ–Ω: {pool}")
    else:
        print("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    await pool_finder.close()

if __name__ == "__main__":
    asyncio.run(main())