import asyncio
import aiohttp
import time
import requests
from utils.PoolFinder import find_pool_fast
from utils.onchain import get_sol_price, get_token_supply
from TokenMonitor import token_monitor
from database.trade_logger import trade_logger

class WizardTrader:
    def __init__(self, chat_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WizardTrader
        chat_id: ID —á–∞—Ç–∞ –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤
        """
        self.chat_id = chat_id
        self.monitor_task = None
        self.current_token = None

    async def send_token_to_chat(self, token_address: str, client):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
        """
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await client.send_message(self.chat_id, token_address)
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç {token_address[:8]}... –≤ —á–∞—Ç {self.chat_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç: {e}")

    async def trade_token(self, token_address, ticker=None, call_start_time=None, call_cap=None, client=None):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""

        total_start = time.time()
        step_times = {}

        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —á–∞—Ç
        send_start = time.time()
        await self.send_token_to_chat(token_address, client)
        step_times['send_to_chat'] = (time.time() - send_start) * 1000

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã - –∏–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
        async with aiohttp.ClientSession() as session:
            # –§—É–Ω–∫—Ü–∏–∏ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
            async def timed_sol():
                start = time.time()
                result = await get_sol_price(session)
                return result, (time.time() - start) * 1000
                
            async def timed_supply():
                start = time.time()
                result = await get_token_supply(token_address)
                return result, (time.time() - start) * 1000
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            sol_task = asyncio.create_task(timed_sol())
            supply_task = asyncio.create_task(timed_supply())
            
            # –ñ–¥–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            (sol_price, sol_time), (token_supply, supply_time) = await asyncio.gather(sol_task, supply_task)
            
        step_times['sol'] = sol_time
        step_times['supply'] = supply_time
        step_times['parallel_requests'] = max(sol_time, supply_time)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        token_monitor.add_token(token_address)
        token_monitor.active_tokens[token_address]['ticker'] = ticker
        
        # –ñ–¥–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞—Ç—É—Ä—É –ø–æ–∫—É–ø–∫–∏ (–¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏)
        buy_monitor_start = time.time()
        buy_signature = await token_monitor.wait_for_buy_signature_only(token_address, timeout=120.0)
        
        if buy_signature:
            print(f"\n‚úÖ –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–∞–π–¥–µ–Ω–∞!")
            
            # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            buy_info = await token_monitor.wait_for_buy(token_address, timeout=30.0)
            
            if not buy_info:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è {token_address[:8]}...")
                token_monitor.remove_token(token_address)
                return False
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É
            token_amount = buy_info.get('token_amount', 0.0)
            sol_pure = buy_info.get('sol_spent_pure')
            
            print(f"‚úÖ BUY —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞!")
            print(f"   ü™ô Token: {token_address[:8]}...")
            print(f"   üì¶ Amount: {token_amount:.6f}")
            print(f"   üîª –ü–æ—Ç—Ä–∞—á–µ–Ω–æ (–ø–æ –∫–æ—à–µ–ª—å–∫—É): {buy_info.get('sol_spent_wallet', 0.0):.9f} SOL")
            if sol_pure is not None:
                print(f"   üíé –ü–æ—Ç—Ä–∞—á–µ–Ω–æ (—á–∏—Å—Ç–æ —Å–≤–æ–ø):   {sol_pure:.9f} SOL")
                
                # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã
                if token_amount > 0:
                    buy_price = sol_pure / token_amount
                    price_in = buy_price * sol_price
                    mcap = price_in * token_supply
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –±–µ–∑ –Ω–∞—É—á–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏
                    if price_in < 0.000001:
                        price_str = f"{price_in:.12f}"
                    elif price_in < 0.001:
                        price_str = f"{price_in:.9f}"
                    elif price_in < 1:
                        price_str = f"{price_in:.6f}"
                    else:
                        price_str = f"{price_in:.3f}"
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ token_monitor
                    signature_time = token_monitor.get_signature_time(buy_signature)
                    if signature_time and call_start_time:
                        signature_detection_time = (signature_time - call_start_time) * 1000
                        print(f'üí∞ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {price_str} USD | –ö–∞–ø–∞: {mcap:,.0f} | –≤—Ä–µ–º—è ({signature_detection_time:.0f}ms) | –¢–æ–∫–µ–Ω: {token_address[:8]}...')
                    else:
                        print(f'üí∞ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {price_str} USD | –ö–∞–ø–∞: {mcap:,.0f} | –¢–æ–∫–µ–Ω: {token_address[:8]}...')
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è token_monitor
                    token_monitor.active_tokens[token_address]['entry_mcap'] = mcap
                    token_monitor.active_tokens[token_address]['ticker'] = ticker
                    token_monitor.active_tokens[token_address]['remaining_position'] = token_amount
                    token_monitor.active_tokens[token_address]['sell_transactions'] = []
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –≤ JSON –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                    if 'buy_signature' in token_monitor.active_tokens[token_address]:
                        trade_logger.add_buy(token_address, ticker, mcap, token_monitor.active_tokens[token_address]['buy_signature'], call_cap, token_amount, signature_time)
                        print(f"üìù –ü–æ–∫—É–ø–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ JSON –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
        else:
            print(f"‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}... (timeout)")
            # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –µ—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            token_monitor.remove_token(token_address)
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–æ–π –∏ –ø—Ä–æ–¥–∞–∂–µ–π
        await asyncio.sleep(1)
        
        # –ñ–¥–µ–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –¥–æ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–∑–∏—Ü–∏–∏ (—Ç–∞–π–º–∞—É—Ç 6 —á–∞—Å–æ–≤)
        sell_start = time.time()
        entry_mcap = token_monitor.active_tokens[token_address]['entry_mcap']
        sell_transactions = await token_monitor.wait_for_all_sells(token_address, timeout=21600.0)
        sell_detection_time = (time.time() - sell_start) * 1000
        
        if sell_transactions:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥–∞–∂: {len(sell_transactions)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø—Ä–æ–¥–∞–∂—É
            total_sold_amount = 0
            total_sol_received = 0
            
            for i, sell_tx in enumerate(sell_transactions, 1):
                sell_info = sell_tx['info']
                token_amount = sell_info.get('token_amount', 0.0)
                sol_pure = sell_info.get('sol_received_pure')
                
                print(f"\n   üì¶ –ü—Ä–æ–¥–∞–∂–∞ #{i}:")
                print(f"   ü™ô Token: {token_address[:8]}...")
                print(f"   üì¶ Amount: {token_amount:.6f}")
                print(f"   üî∫ –ü–æ–ª—É—á–µ–Ω–æ (–ø–æ –∫–æ—à–µ–ª—å–∫—É):  {sell_info.get('sol_received_wallet', 0.0):.9f} SOL")
                if sol_pure is not None:
                    print(f"   üíé –ü–æ–ª—É—á–µ–Ω–æ (—á–∏—Å—Ç–æ —Å–≤–æ–ø):   {sol_pure:.9f} SOL")
                    
                    # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ–¥–∞–∂–∏
                    if token_amount > 0:
                        sell_price = sol_pure / token_amount
                        price_in = sell_price * sol_price
                        mcap = price_in * token_supply
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –±–µ–∑ –Ω–∞—É—á–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏
                        if price_in < 0.000001:
                            price_str = f"{price_in:.12f}"
                        elif price_in < 0.001:
                            price_str = f"{price_in:.9f}"
                        elif price_in < 1:
                            price_str = f"{price_in:.6f}"
                        else:
                            price_str = f"{price_in:.3f}"
                        
                        print(f'   üí∞ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ #{i}: {price_str} USD | –ö–∞–ø–∞: {mcap:,.0f}')
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂—É –≤ JSON
                        sell_signature = sell_tx.get('signature', '')
                        if sell_signature:
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π entry_mcap
                            sell_percent = ((mcap - entry_mcap) / entry_mcap) * 100 if entry_mcap > 0 else 0
                            
                            trade_logger.add_sell(token_address, sell_signature, mcap, sell_percent, token_amount)
                            print(f"   üìù –ü—Ä–æ–¥–∞–∂–∞ #{i} –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ JSON | Percent: {sell_percent:.1f}%")
                        
                        total_sold_amount += token_amount
                        total_sol_received += sol_pure
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø—Ä–æ–¥–∞–∂–∞–º
            if sell_transactions and total_sold_amount > 0:
                avg_sell_price = total_sol_received / total_sold_amount
                avg_price_in = avg_sell_price * sol_price
                avg_mcap = avg_price_in * token_supply
                
                print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"   üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {avg_price_in:.6f} USD")
                print(f"   üìà –°—Ä–µ–¥–Ω—è—è –∫–∞–ø–∞ –ø—Ä–æ–¥–∞–∂–∏: {avg_mcap:,.0f}")
                print(f"   üì¶ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ: {total_sold_amount:.6f} —Ç–æ–∫–µ–Ω–æ–≤")
                print(f"   üíé –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {total_sol_received:.9f} SOL")
        else:
            print(f"‚ùå –ü—Ä–æ–¥–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
        
        # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π PnL
        if sell_transactions:
            trade_logger.finalize_trade(token_address)
            print(f"üìä –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
        
        # –¢–æ–∫–µ–Ω —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ token_monitor –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ

        return True
