import asyncio
import aiohttp
import json
import websockets
import threading
import time
from typing import Dict, Optional
from config import RPC_URL, WEBSOCKET_URL, wallet_address

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º trade_logger
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
from database.trade_logger import trade_logger

class TokenMonitor:
    def __init__(self):
        self.active_tokens: Dict[str, Dict] = {}  # token_address -> {buy_signature, buy_info, remaining_position, sell_transactions}
        self.processed_signatures = set()
        self.cache_lock = threading.Lock()
        self.websocket = None
        self.monitoring = False
        self.signature_timestamps = {}  # –ö—ç—à –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞—Ç—É—Ä
        self.wallet_address = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ main_test.py
        
        # Callback'–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö
        self.on_buy_detected = None
        self.on_sell_detected = None
        
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        if self.monitoring:
            return
            
        self.monitoring = True
        asyncio.create_task(self._monitor_websocket())
        
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.monitoring = False
        if self.websocket:
            await self.websocket.close()
            
    async def _monitor_websocket(self):
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ WebSocket"""
        while self.monitoring:
            try:
                async with websockets.connect(WEBSOCKET_URL) as ws:
                    self.websocket = ws
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º wallet_address –∏–∑ main_test.py, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                    target_wallet = self.wallet_address if self.wallet_address else wallet_address
                    
                    sub_msg = {
                        "jsonrpc": "2.0",
                        "id": 1,
                        "method": "logsSubscribe",
                        "params": [
                            {"mentions": [target_wallet]},
                            {"commitment": "confirmed"}
                        ]
                    }
                    await ws.send(json.dumps(sub_msg))
                    await ws.recv()  # confirm
                    
                    print(f"üì° –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è: {target_wallet}")
                    
                    while self.monitoring:
                        msg = await ws.recv()
                        data = json.loads(msg)
                        
                        if data.get("method") != "logsNotification":
                            continue
                            
                        tx_value = data.get("params", {}).get("result", {}).get("value", {})
                        if not tx_value or tx_value.get("err"):
                            continue
                            
                        signature = tx_value["signature"]
                        
                        # –°–¢–û–ü! –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
                        self.signature_timestamps[signature] = time.time()
                        
                        await self._process_transaction(signature)
                        
            except Exception as e:
                print(f"üî¥ –û—à–∏–±–∫–∞ WebSocket: {e}, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)
                
    async def _process_transaction(self, signature: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫ –∫–∞–∫–æ–º—É —Ç–æ–∫–µ–Ω—É –æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        with self.cache_lock:
            if signature in self.processed_signatures:
                return
            self.processed_signatures.add(signature)
        
        print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: {signature[:8]}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        tx_info = await self._get_transaction_details(signature)
        if not tx_info:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {signature[:8]}...")
            return
            
        token_address = tx_info.get('token_address')
        direction = tx_info.get('direction')
        
        print(f"üîç –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {signature[:8]}... | –¢–æ–∫–µ–Ω: {token_address[:8] if token_address else 'N/A'} | –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")
        print(f"üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã: {list(self.active_tokens.keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
        if token_address not in self.active_tokens:
            print(f"‚ùå –¢–æ–∫–µ–Ω {token_address[:8] if token_address else 'N/A'} –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
            return
            
        token_data = self.active_tokens[token_address]
        
        if direction == 'buy' and 'buy_signature' not in token_data:
            # –≠—Ç–æ –ø–æ–∫—É–ø–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            token_amount = tx_info.get('token_amount', 0.0)
            token_data['buy_signature'] = signature
            token_data['buy_info'] = tx_info
            token_data['remaining_position'] = token_amount
            token_data['sell_transactions'] = []
            
            print(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}... | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {token_amount:.6f}")
            
            # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if self.on_buy_detected:
                try:
                    await self.on_buy_detected(signature, token_address)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback –ø–æ–∫—É–ø–∫–∏: {e}")

            
        elif direction == 'sell':
            # –≠—Ç–æ –ø—Ä–æ–¥–∞–∂–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            token_amount = tx_info.get('token_amount', 0.0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫—É–ø–∫–∞ —É–∂–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞
            if 'remaining_position' not in token_data:
                print(f"üîç –ü—Ä–æ–¥–∞–∂–∞ {signature[:8]}... –¥–ª—è {token_address[:8]}... –Ω–æ remaining_position –Ω–µ –Ω–∞–π–¥–µ–Ω. –¢–æ–∫–µ–Ω: {list(token_data.keys())}")
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–∞–∂—É –≤ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            sell_tx = {
                'signature': signature,
                'info': tx_info,
                'amount': token_amount
            }
            token_data['sell_transactions'].append(sell_tx)
            
            # –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –ø–æ–∑–∏—Ü–∏—é
            token_data['remaining_position'] -= token_amount
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –∏ –∫–∞–ø–µ –¥–ª—è –ª–æ–≥–∞
            sell_price_info = await self._get_sell_price_info(tx_info, token_data)
            if sell_price_info:
                sell_mcap = sell_price_info.get('mcap', 0)
                entry_mcap = sell_price_info.get('entry_mcap', 0)
                mcap_change_percent = sell_price_info.get('mcap_change_percent', 0)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ Wizard_trader.py –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                
                print(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}... | –ü—Ä–æ–¥–∞–Ω–æ: {token_amount:.6f} | –û—Å—Ç–∞–ª–æ—Å—å: {token_data['remaining_position']:.6f} | –ö–∞–ø–∞: {sell_mcap:,.0f} ({mcap_change_percent:+.1f}%)")
            else:
                print(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}... | –ü—Ä–æ–¥–∞–Ω–æ: {token_amount:.6f} | –û—Å—Ç–∞–ª–æ—Å—å: {token_data['remaining_position']:.6f}")
            
            # –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if self.on_sell_detected:
                try:
                    await self.on_sell_detected(signature, token_address)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback –ø—Ä–æ–¥–∞–∂–∏: {e}")
            
            # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–¥–∞–Ω–∞, —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if token_data['remaining_position'] <= 0:
                print(f"üéØ –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–¥–∞–Ω–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}... | –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {len(token_data['sell_transactions'])}")
                
                # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ Wizard_trader.py –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

            
    async def _get_transaction_details(self, signature: str, retries: int = 15, delay: float = 1.0):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        for attempt in range(retries):
            async with aiohttp.ClientSession() as session:
                payload = {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "getTransaction",
                    "params": [
                        signature,
                        {"encoding": "jsonParsed", "maxSupportedTransactionVersion": 0}
                    ]
                }
                
                try:
                    async with session.post(RPC_URL, json=payload, timeout=10) as resp:
                        if resp.status != 200:
                            await asyncio.sleep(delay)
                            continue
                            
                        data = await resp.json()
                        result = data.get("result")
                        if not result:
                            await asyncio.sleep(delay)
                            continue
                            
                        meta = result.get("meta")
                        if not meta or meta.get("err"):
                            return None
                            
                        try:
                            keys = result["transaction"]["message"]["accountKeys"]
                            accounts = [a["pubkey"] for a in keys]
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º wallet_address –∏–∑ main_test.py, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                            target_wallet = self.wallet_address if self.wallet_address else wallet_address
                            
                            if target_wallet not in accounts:
                                return None
                                
                            idx = accounts.index(target_wallet)
                            sol_change = (meta["postBalances"][idx] - meta["preBalances"][idx]) / 1e9
                        except (KeyError, ValueError, IndexError) as e:
                            return None
                            
                        pre_tokens = {
                            b["mint"]: float(b["uiTokenAmount"].get("uiAmountString", "0.0"))
                            for b in meta.get("preTokenBalances", [])
                            if b.get("owner") == target_wallet
                        }
                        
                        for post in meta.get("postTokenBalances", []):
                            if post.get("owner") != target_wallet:
                                continue
                                
                            mint = post["mint"]
                            post_amt = float(post["uiTokenAmount"].get("uiAmountString", "0.0"))
                            pre_amt = pre_tokens.get(mint, 0.0)
                            delta = post_amt - pre_amt
                            
                            if delta > 0 and sol_change < 0:  # –ü–æ–∫—É–ø–∫–∞
                                pure_sol_swap = self._extract_pure_sol_swap(meta, "buy")
                                return {
                                    "direction": "buy",
                                    "signature": signature,
                                    "token_address": mint,
                                    "token_amount": delta,
                                    "sol_spent_wallet": abs(sol_change),
                                    "sol_spent_pure": pure_sol_swap
                                }
                                
                            if delta < 0:  # –ü—Ä–æ–¥–∞–∂–∞
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ test.py –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–¥–∞–∂
                                swap_details = self._parse_swap_transaction(result, wallet_address)
                                sol_received = 0.0
                                
                                # –ò—â–µ–º SOL –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö
                                for received in swap_details.get("received", []):
                                    if received["mint"] == "So11111111111111111111111111111111111111112":
                                        sol_received = received["amount_received"]
                                        break
                                
                                return {
                                    "direction": "sell",
                                    "signature": signature,
                                    "token_address": mint,
                                    "token_amount": abs(delta),
                                    "sol_received_wallet": sol_change,
                                    "sol_received_pure": sol_received
                                }
                        
                        return None
                        
                except (aiohttp.ClientError, asyncio.TimeoutError) as e:
                    await asyncio.sleep(delay)
                    
        return None
        
    def _parse_swap_transaction(self, result, user_wallet_address: str) -> dict:
        """
        –ü–∞—Ä—Å–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–≤–∞–ø–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç, –∫–∞–∫–∏–µ —Ç–æ–∫–µ–Ω—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        –∏ –ø–æ–ª—É—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–ª–æ–≥–∏–∫–∞ –∏–∑ test.py).
        """
        try:
            meta = result.get('meta')
            if not meta:
                return {"sent": [], "received": []}

            pre_balances = meta.get('preTokenBalances', [])
            post_balances = meta.get('postTokenBalances', [])

            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –±–∞–ª–∞–Ω—Å–æ–≤ –î–û –¥–ª—è –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤
            pre_balances_map = {
                item['accountIndex']: {
                    'mint': item['mint'],
                    'owner': item.get('owner'),
                    'amount': float(item['uiTokenAmount']['uiAmountString'])
                }
                for item in pre_balances if item.get('uiTokenAmount', {}).get('uiAmountString')
            }

            sent_tokens = []
            received_tokens = []

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –±–∞–ª–∞–Ω—Å–∞–º –ü–û–°–õ–ï
            for post_bal in post_balances:
                account_index = post_bal.get('accountIndex')
                owner = post_bal.get('owner')
                post_amount_str = post_bal.get('uiTokenAmount', {}).get('uiAmountString')
                
                if not post_amount_str or account_index not in pre_balances_map:
                    continue

                pre_bal_info = pre_balances_map[account_index]
                pre_amount = pre_bal_info['amount']
                post_amount = float(post_amount_str)
                amount_change = post_amount - pre_amount

                # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if abs(amount_change) > 1e-9:
                    # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –£–ú–ï–ù–¨–®–ò–õ–°–Ø
                    if amount_change < 0:
                        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∑–Ω–∞—á–∏—Ç, –æ–Ω –û–¢–î–ê–õ —Ç–æ–∫–µ–Ω—ã
                        if owner == user_wallet_address:
                            amount_sent = abs(amount_change)
                            sent_tokens.append({
                                "mint": post_bal['mint'],
                                "amount_sent": amount_sent
                            })
                        # –ï—Å–ª–∏ —ç—Ç–æ –ù–ï –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∑–Ω–∞—á–∏—Ç, –æ–Ω –ü–û–õ–£–ß–ò–õ —Ç–æ–∫–µ–Ω—ã –æ—Ç DEX
                        else:
                            amount_received = abs(amount_change)
                            received_tokens.append({
                                "mint": post_bal['mint'],
                                "amount_received": amount_received
                            })
            
            return {"sent": sent_tokens, "received": received_tokens}

        except Exception as e:
            return {"sent": [], "received": []}
        
    def _extract_pure_sol_swap(self, meta, direction: str):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç "—á–∏—Å—Ç—É—é" —Å—É–º–º—É SOL –∏–∑ —Å–≤–∞–ø–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
        - –î–ª—è 'buy': –∏—â–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ SOL, –≥–¥–µ –Ω–∞—à –∫–æ—à–µ–ª–µ–∫ —è–≤–ª—è–µ—Ç—Å—è 'authority'.
        - –î–ª—è 'sell': –∏—â–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ wSOL –∞–∫–∫–∞—É–Ω—Ç—ã, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –Ω–∞–º, –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–∏—Ö.
        """
        try:
            wsol_mint = "So11111111111111111111111111111111111111112"
            inner_instructions = meta.get("innerInstructions", [])
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º wallet_address –∏–∑ main_test.py, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            target_wallet = self.wallet_address if self.wallet_address else wallet_address

            if direction == "buy":
                for ix in inner_instructions:
                    for inst in ix.get("instructions", []):
                        parsed = inst.get("parsed", {})
                        if inst.get("program") == "spl-token" and parsed.get("type") == "transferChecked":
                            info = parsed.get("info", {})
                            if info.get("mint") == wsol_mint and info.get("authority") == target_wallet:
                                return float(info.get("tokenAmount", {}).get("uiAmount", 0.0))

            elif direction == "sell":
                # –®–∞–≥ 1: –ù–∞–π—Ç–∏ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ wSOL-–∞–∫–∫–∞—É–Ω—Ç—ã, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –Ω–∞—à–µ–º—É –∫–æ—à–µ–ª—å–∫—É.
                owned_temp_wsol_accounts = set()
                for ix in inner_instructions:
                    for inst in ix.get("instructions", []):
                        parsed = inst.get("parsed", {})
                        if parsed.get("type") in ["initializeAccount", "initializeAccount3"]:
                            info = parsed.get("info", {})
                            if info.get("owner") == target_wallet and info.get("mint") == wsol_mint:
                                owned_temp_wsol_accounts.add(info.get("account"))

                # –®–∞–≥ 2: –ù–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ wSOL –Ω–∞ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
                if owned_temp_wsol_accounts:
                    for ix in inner_instructions:
                        for inst in ix.get("instructions", []):
                            parsed = inst.get("parsed", {})
                            if inst.get("program") == "spl-token" and parsed.get("type") == "transferChecked":
                                info = parsed.get("info", {})
                                if info.get("mint") == wsol_mint and info.get("destination") in owned_temp_wsol_accounts:
                                    return float(info.get("tokenAmount", {}).get("uiAmount", 0.0))

        except Exception as e:
            pass
        return None
        
    async def _get_sell_price_info(self, sell_tx_info: dict, token_data: dict) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –∏ –∫–∞–ø–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
        try:
            from utils.onchain import get_sol_price, get_token_supply
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–µ
            token_amount = sell_tx_info.get('token_amount', 0.0)
            sol_pure = sell_tx_info.get('sol_received_pure')
            
            if not sol_pure or token_amount <= 0:
                return None
                
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É SOL –∏ supply —Ç–æ–∫–µ–Ω–∞
            async with aiohttp.ClientSession() as session:
                sol_price = await get_sol_price(session)
                token_supply = await get_token_supply(sell_tx_info.get('token_address'))
                
                if not sol_price or not token_supply:
                    return None
                    
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∏ –∫–∞–ø—É –ø—Ä–æ–¥–∞–∂–∏
                sell_price = sol_pure / token_amount
                price_in = sell_price * sol_price
                sell_mcap = price_in * token_supply
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ø—É –≤—Ö–æ–¥–∞ –∏–∑ WL_trader (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
                entry_mcap = token_data.get('entry_mcap', 0)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–ø—ã
                if entry_mcap and entry_mcap > 0:
                    mcap_change_percent = ((sell_mcap - entry_mcap) / entry_mcap) * 100
                else:
                    mcap_change_percent = 0
                    
                return {
                    'mcap': sell_mcap,
                    'entry_mcap': entry_mcap,
                    'mcap_change_percent': mcap_change_percent
                }
                
        except Exception as e:
            return None
        
    def add_token(self, token_address: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        self.active_tokens[token_address] = {}
        print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {token_address[:8]}... (–≤—Å–µ–≥–æ: {len(self.active_tokens)})")
        
    def remove_token(self, token_address: str):
        """–£–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        if token_address in self.active_tokens:
            del self.active_tokens[token_address]
            
    async def wait_for_buy_signature_only(self, token_address: str, timeout: float = 60.0) -> Optional[str]:
        """–ñ–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞—Ç—É—Ä—É –ø–æ–∫—É–ø–∫–∏ (–±–µ–∑ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)"""
        start_time = time.time()
        while time.time() - start_time < timeout:
            if token_address in self.active_tokens:
                token_data = self.active_tokens[token_address]
                if 'buy_signature' in token_data:
                    return token_data['buy_signature']
            await asyncio.sleep(0.1)
        return None
        
    async def wait_for_buy(self, token_address: str, timeout: float = 60.0) -> Optional[dict]:
        """–ñ–¥–µ—Ç –ø–æ–∫—É–ø–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        start_time = time.time()
        while time.time() - start_time < timeout:
            if token_address in self.active_tokens:
                token_data = self.active_tokens[token_address]
                if 'buy_signature' in token_data:
                    return token_data['buy_info']
            await asyncio.sleep(0.1)
        return None
        
    def get_signature_time(self, signature: str) -> Optional[float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞—Ç—É—Ä—ã"""
        return self.signature_timestamps.get(signature)
        
    async def wait_for_all_sells(self, token_address: str, timeout: float = 21600.0) -> list:
        """–ñ–¥–µ—Ç –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–æ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        start_time = time.time()
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
        
        while time.time() - start_time < timeout:
            if token_address in self.active_tokens:
                token_data = self.active_tokens[token_address]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ –ø—Ä–æ–¥–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è
                if token_data.get('remaining_position', 0) <= 0:
                    sell_transactions = token_data.get('sell_transactions', [])
                    print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}... | –ü—Ä–æ–¥–∞–∂: {len(sell_transactions)} | remaining_position: {token_data.get('remaining_position', 0)}")
                    # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                    self.remove_token(token_address)
                    return sell_transactions
                    
            else:
                # –¢–æ–∫–µ–Ω –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è - –ø–æ–∑–∏—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–¥–∞–Ω–∞
                print(f"‚ùå –¢–æ–∫–µ–Ω {token_address[:8]}... –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
                return []
                
            await asyncio.sleep(0.1)
        
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
        return []
    
    async def wait_for_buy_transaction(self, token_address: str, timeout: float = 60.0) -> Optional[dict]:
        """–ñ–¥–µ—Ç –ø–æ–∫—É–ø–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        start_time = time.time()
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
        
        while time.time() - start_time < timeout:
            if token_address in self.active_tokens:
                token_data = self.active_tokens[token_address]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω–∞ –ª–∏ –ø–æ–∫—É–ø–∫–∞
                if 'buy_signature' in token_data:
                    buy_info = token_data.get('buy_info', {})
                    buy_signature = token_data.get('buy_signature', '')
                    token_amount = token_data.get('remaining_position', 0)
                    
                    print(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}... | –°–∏–≥–Ω–∞—Ç—É—Ä–∞: {buy_signature[:8]}... | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {token_amount:.6f}")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–∫—É–ø–∫–∏
                    return {
                        'signature': buy_signature,
                        'token_address': token_address,
                        'token_amount': token_amount,
                        'buy_info': buy_info,
                        'timestamp': self.get_signature_time(buy_signature)
                    }
                    
            else:
                # –¢–æ–∫–µ–Ω –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
                print(f"‚ùå –¢–æ–∫–µ–Ω {token_address[:8]}... –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
                return None
                
            await asyncio.sleep(0.1)
        
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address[:8]}...")
        return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
token_monitor = TokenMonitor() 