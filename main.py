#!/usr/bin/env python3
import asyncio
import os
import time
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from trading.wizard_trader import WizardTrader
from TGparser import find_solana_contract
from TokenMonitor import token_monitor
from config import *

# --------------- –∫–ª–∏–µ–Ω—Ç Telegram ---------------
session_str = os.getenv("SESSION_BASE64")
if not session_str:
    print("‚ùå SESSION_BASE64 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

session_bytes = __import__("base64").b64decode(session_str.encode())
client = TelegramClient(StringSession(session_bytes.decode()), api_id, api_hash)

# --------------- —Ç—Ä–µ–π–¥–µ—Ä ---------------
if APP != "Wizard":
    raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π APP: {APP}")
trader = WizardTrader(wizard_chat_id)

# --------------- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ ---------------
@client.on(events.NewMessage(chats=[channel_username]))
async def handler(event):
    call_time = time.time()
    data = find_solana_contract(event.raw_text)
    if not data:
        return

    if max_mcap and data.get("mcap", 0) > max_mcap:
        print(f"‚ùå –ú–∞–∫–µ—Ç–∫–∞–ø {data['mcap']} –≤—ã—à–µ –ª–∏–º–∏—Ç–∞")
        return

    print(f"üì¢ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: [{data.get('ticker') or '???'}] {data['contract']}")
    ok = await trader.trade_token(data["contract"],
                                  data.get("ticker"),
                                  call_time,
                                  data.get("mcap"),
                                  client)
    print("‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" if ok else "‚ùå –û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏")

# --------------- –∑–∞–ø—É—Å–∫ ---------------
async def main():
    await token_monitor.start_monitoring()
    await client.start()
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())